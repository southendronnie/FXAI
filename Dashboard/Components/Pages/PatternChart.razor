@inject IJSRuntime JS
@inject PatternStatsEngine StatsEngine

<h3 class="text-lg font-semibold mb-2">📈 Pattern Stats Chart</h3>

<select @onchange="OnMetricChanged" class="mb-2 p-1 border rounded">
    <option value="HitRate">Hit Rate</option>
    <option value="AveragePnL">Raw PnL</option>
    <option value="NetPnL">Net PnL</option>
</select>

<div id="patternChart" style="height: 400px;"></div>

@code {
    string selectedMetric = "NetPnL";
    private Timer? refreshTimer;

    protected override void OnInitialized()
    {
        refreshTimer = new Timer(async _ => await RefreshChart(), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    async Task OnMetricChanged(ChangeEventArgs e)
    {
        selectedMetric = e.Value?.ToString() ?? "NetPnL";
        await RefreshChart();
    }

    async Task RefreshChart()
    {
        var stats = StatsEngine.GetStats().ToList();
        var chartData = stats.Select(s => new
        {
            name = s.Type,
            y = selectedMetric switch
            {
                "HitRate" => Math.Round(s.HitRate, 4),
                "AveragePnL" => Math.Round((double)s.AveragePnL, 4),
                "NetPnL" => Math.Round((double)s.NetPnL, 4),
                _ => 0
            }
        }).ToList();

        await JS.InvokeVoidAsync("updatePatternChart", selectedMetric, chartData);
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}